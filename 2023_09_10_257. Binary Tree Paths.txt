/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution 
{
    public IList<string> BinaryTreePaths(TreeNode root) 
    {
        string refPath = "";
            List<string> result = new List<string>();
            TreeTraversal(root, ref refPath);

            return result;

            void TreeTraversal(TreeNode node, ref string s)
            {
                if (node == null)
                {
                    return;
                }
                string path = string.Format("{0}{1}{2}", s, node.val, node.left != null || node.right != null ? "->" : "");
                if (node.left != null)
                {
                    TreeTraversal(node.left, ref path);
                }
                if (node.right != null)
                {
                    TreeTraversal(node.right, ref path);
                }

                if (node.left == null && node.right == null)
                {
                    result.Add(path);
                }
            }
    }
}